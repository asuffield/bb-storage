syntax = "proto3";

package buildbarn.configuration.global;

import "google/protobuf/duration.proto";
import "pkg/proto/configuration/tls/tls.proto";

option go_package = "github.com/buildbarn/bb-storage/pkg/proto/configuration/global";

message JaegerConfiguration {
  // Jaeger agent endpoint.
  string agent_endpoint = 1;

  // Jaeger collector endpoint.
  string collector_endpoint = 2;

  // OpenTracing service name.
  string service_name = 3;
}

message StackdriverConfiguration {
  // GCP project to which trace data is sent.
  // Can be left blank if in GCP, automatically determined from metadata server.
  string project_id = 1;

  // Location is the identifier of the GCP or AWS cloud region/zone in which
  // the data for a resource is stored. (defaults to info from metadata server)
  string location = 2;

  // Additional attributes to add to all spans by default.
  map<string, string> default_trace_attributes = 3;
}

message BasicAuthenticationConfiguration {
  // Username to store in the "Authorization: Basic" header.
  string username = 1;

  // Password to store in the "Authorization: Basic" header.
  string password = 2;
}

message PrometheusPushgatewayConfiguration {
  // URL of the Prometheus Pushgateway server. Do not include the
  // "/metrics/jobs/..." part in the URL.
  string url = 1;

  // Name of the job to announce to the Prometheus Pushgateway.
  string job = 2;

  // If set, enable the use of HTTP basic authentication.
  BasicAuthenticationConfiguration basic_authentication = 3;

  // Label pairs to use as the grouping key.
  map<string, string> grouping = 4;

  // Interval between metrics pushes.
  google.protobuf.Duration push_interval = 5;
}

message OpenCensusConfiguration {
  // Export data to an OpenCensus agent. The recommended configuration
  // is to use opentelemetry-collector and enable its opencensus-agent
  // receiver.

  // Connection address for the agent. Default is localhost:55678.
  string address = 1;

  // TLS configuration. TLS is not enabled when left unset.
  buildbarn.configuration.tls.ClientConfiguration tls = 2;

  // OpenCensus service name.
  string service_name = 3;
}

message OpenTelemetryConfiguration {
  // Connection address for the collector. Default is localhost:55680.
  string address = 1;

  // TLS configuration. TLS is not enabled when left unset.
  buildbarn.configuration.tls.ClientConfiguration tls = 2;

  // Resource detectors. Labels will be merged, with earlier things in
  // this entries being preferred over later ones.
  enum ResourceDetector {
    ENV = 0;  // Use OTEL_RESOURCE_ATTRIBUTES environment variable
    AWS = 1;  // Use AWS instance metadata
    GCE = 2;  // Use GCE instance metadata
    GKE = 3;  // Use GKE API
  }
  repeated ResourceDetector resource_detectors = 3;

  // Queue size for buffering spans. Default is 2048.
  int32 max_queue_size = 4;

  // If true, then span Start() and End() functions will block when
  // the queue is full. This will significantly degrade performance,
  // but does guarantee no spans are lost, which can be useful when
  // debugging with the sampling probability set to 1.0.
  bool block_on_queue_full = 5;

  // Maximum duration to hold a batch before sending. Default is 5s.
  google.protobuf.Duration batch_timeout = 6;

  // Maximum number of spans to batch before sending. Default is 512.
  int32 max_export_batch_size = 7;
}

message TracingConfiguration {
  // Jaeger configuration for tracing has been replaced by oc and otel.
  reserved 1;

  // Stackdriver Trace configuration has been replaced by oc and otel.
  reserved 2;

  // Export stats on traces to Prometheus.
  bool enable_prometheus = 3;

  // Trace sampling is now configured with sample_probability.
  reserved 4;

  // Fraction of traces that should be sampled. 0 will disable
  // tracing, 1 will sample all traces.
  float sample_probability = 5;

  // The intended usage is to run the opentelemetry-collector agent as
  // a sidecar, with both the opencensus and otel receivers enabled,
  // and configure that agent to send traces to your preferred
  // backend.

  // In order to fully capture all traces, it is currently necessary
  // to configure both oc and otel, because not all libraries have
  // migrated to OpenTelemtry yet. A sufficient minimal configuration is:
  //
  // oc: {
  //   serviceName = "buildbarn",
  // },
  // otel: {
  //   resourceDetectors: ['ENV'],
  // },
  //
  // And set the environment variable OTEL_RESOURCE_ATTRIBUTES to
  // 'service.name=buildbarn'.

  // Export data to an OpenCensus agent.
  OpenCensusConfiguration oc = 6;

  // Export data to an OpenTelemetry collector.
  OpenTelemetryConfiguration otel = 7;
}

message Configuration {
  // Configuration for sending tracing data to various services.
  TracingConfiguration tracing = 1;

  // Sets the runtime.SetMutexProfileFraction(), so that the HTTP debug
  // endpoints used by pprof expose mutex profiling information.
  int32 mutex_profile_fraction = 2;

  // Periodically push metrics to a Prometheus Pushgateway, as opposed
  // to letting the Prometheus server scrape the metrics.
  PrometheusPushgatewayConfiguration prometheus_pushgateway = 3;
}
